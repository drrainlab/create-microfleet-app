"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const common_errors_1 = require("common-errors");
const _debug = require("debug");
const fs = require("fs");
const glob = require("glob");
const path = require("path");
const constants_1 = require("./constants");
const debug = _debug('mservice:lua');
/**
 * Loads LUA script and defines it on the redis instance.
 * @param dir - Directory to scan for LUA scripts to load.
 * @param redis - Redis connector instance.
 */
function loadLuaScripts(dir, redis) {
    if (!path.isAbsolute(dir)) {
        throw new common_errors_1.ArgumentError('config.scripts must be an absolute path');
    }
    debug('loading form %s', dir);
    return glob
        .sync('*.lua', { cwd: dir })
        .forEach((scriptName) => {
        const lua = fs.readFileSync(`${dir}/${scriptName}`, 'utf8');
        const name = path.basename(scriptName, '.lua');
        debug('attaching %s', name);
        if (typeof redis[name] === 'undefined') {
            // NOTICE: make sure that you pass number of keys as first arg when supplying function
            redis.defineCommand(name, { lua });
        }
        else {
            this.log.warn('script %s already defined', name);
        }
    });
}
exports.loadLuaScripts = loadLuaScripts;
function isStarted(service, RedisType) {
    return () => (service.redis && (service.redis instanceof RedisType));
}
exports.isStarted = isStarted;
async function hasConnection(hasRedis) {
    assert(hasRedis(), constants_1.ERROR_NOT_STARTED);
    const ping = await this.redis.ping();
    assert(ping, constants_1.ERROR_NOT_HEALTHY);
    return true;
}
exports.hasConnection = hasConnection;
//# sourceMappingURL=utils.js.map