"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const common_errors_1 = require("common-errors");
const __1 = require("../");
const require_1 = require("../utils/require");
const retry = require("bluebird-retry");
/**
 * Relative priority inside the same plugin group type
 */
exports.priority = 0;
exports.name = 'knex';
exports.type = __1.PluginTypes.database;
function attach(params = {}) {
    const factory = require_1.default('knex');
    const service = this;
    assert(service.hasPlugin('logger'), new common_errors_1.NotFoundError('log module must be included'));
    assert(service.hasPlugin('validator'), new common_errors_1.NotFoundError('validator module must be included'));
    const opts = service.ifError('knex', params);
    const config = service.ifError(`knex.${opts.client}`, opts);
    const knex = service.knex = factory(config);
    const establishConnection = async () => {
        try {
            const result = await knex.raw('SELECT TRUE;');
            assert.equal(result.rows[0].bool, true);
        }
        catch (err) {
            this.log.warn({ err }, 'Failed to connect to PGSQL');
            throw err;
        }
    };
    return {
        async connect() {
            await retry(establishConnection, {
                interval: 500,
                backoff: 2,
                max_interval: 5000,
                timeout: 60000,
                max_tries: 100,
            });
            service.addMigrator('knex', () => knex.migrate.latest());
            service.emit('plugin:connect:knex', knex);
            return knex;
        },
        async close() {
            await knex.destroy();
            service.emit('plugin:close:knex');
        },
    };
}
exports.attach = attach;
//# sourceMappingURL=knex.js.map