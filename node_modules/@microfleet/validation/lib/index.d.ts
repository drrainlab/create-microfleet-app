import ajv = require('ajv');
import Promise = require('bluebird');
import { InvalidOperationError, NotFoundError } from 'common-errors';
import { HttpStatusError } from './HttpStatusError';
declare type globFilter = (filename: string) => boolean;
/**
 * @namespace Validator
 */
export declare class Validator {
    /**
     * Read more about options here:
     * https://github.com/epoberezkin/ajv
     */
    static readonly defaultOptions: ajv.Options;
    private readonly schemaDir;
    private readonly $ajv;
    private readonly filterOpt;
    private readonly schemaOptions;
    /**
     * Initializes validator with schemas in the schemaDir with a given filter function
     * and schemaOptions
     * @param schemaDir
     * @param filter
     * @param schemaOptions
     */
    constructor(schemaDir?: string, filter?: globFilter | null, schemaOptions?: ajv.Options);
    /**
     * In case you need raw validator instance, e.g. to add more schemas later
     */
    readonly ajv: ajv.Ajv;
    /**
     * Validates data via a `schema`, which equals to schema name in the
     * passed dir
     * @param  schema
     * @param  data
     */
    validate: (schema: string, data: any) => Promise<any>;
    /**
     * Make use of { filter: true } option and catch 417 errors
     * @param  schema
     * @param  data
     * @return
     */
    filter: (schema: string, data: any) => Promise<any>;
    /**
     * Synchronously validates and returns either an Error object or `void 0`
     * @param  schema
     * @param  data
     */
    validateSync: (schema: string, data: any) => {
        error: NotFoundError;
        doc?: undefined;
    } | {
        error: InvalidOperationError;
        doc: any;
    } | {
        doc: any;
        error?: undefined;
    };
    /**
     * Sync validation and throws if error is encountered.
     * @param  {string} schema
     * @param  {mixed} data
     */
    ifError: (schema: string, data: any) => any;
    /**
     * #init()
     *
     * Init function - loads schemas from config dir
     * Can call multiple times to load multiple dirs, though one must make sure
     * that files are named differently, otherwise validators will be overwritten
     *
     * @param dir - path, eventually resolves to absolute
     * @return
     */
    init(dir?: string | undefined, isAsync?: boolean): Promise<void> | undefined;
    /**
     * @private
     *
     * Internal validation function
     * @param  schema - schema name
     * @param  data
     * @return
     */
    private $validate;
}
export { HttpStatusError };
export default Validator;
