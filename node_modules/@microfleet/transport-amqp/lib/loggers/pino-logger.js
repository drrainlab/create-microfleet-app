"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const pino = require('pino');

const stdout = require('stdout-stream'); // holy crap with stdout and good


const isProduction = process.env.NODE_ENV === 'production';
const {
  write
} = stdout;

stdout.write = (chunk, enc, next) => write.call(stdout, chunk, enc, next);

module.exports = (name = 'ms-amqp-transport', settings = {}) => {
  const opts = _objectSpread({
    name,
    level: isProduction ? 'info' : 'trace',
    serializers: {
      err: pino.stdSerializers.err
    }
  }, settings);

  return pino(opts, stdout);
};