"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Joi = require('@hapi/joi');
/**
 * Settings confirm to [policy: string] : settings schema
 * @constructor
 * @param  {Object} settings - Container for policies.
 * @param  {Object} settings.* - Container for policy settings.
 * @param  {number} settings.*.min - Min delay for attempt.
 * @param  {number} settings.*.max - Max delay for attempt.
 * @param  {number} settings.*.factor - Exponential factor.
 */


class Backoff {
  constructor(settings) {
    this.settings = Object.setPrototypeOf(_objectSpread({}, settings), null);
  }

  get(policy, attempt = 0) {
    const {
      min,
      factor,
      max
    } = this.settings[policy];
    if (attempt === 0) return 0;
    if (attempt === 1) return min; // eslint-disable-next-line no-restricted-properties

    return Math.min(Math.round((Math.random() + 1) * min * Math.pow(factor, attempt - 1)), max);
  }

}

_defineProperty(Backoff, "schema", Joi.object({
  private: Joi.object({
    min: Joi.number().min(0).default(250, 'min delay for attempt #1'),
    max: Joi.number().min(0).default(1000, 'max delay'),
    factor: Joi.number().min(1).default(1.2, 'exponential increase factor')
  }).default(),
  consumed: Joi.object({
    min: Joi.number().min(0).default(500, 'min delay for attempt #1'),
    max: Joi.number().min(0).default(5000, 'max delay'),
    factor: Joi.number().min(1).default(1.2, 'exponential increase factor')
  }).default()
}));

module.exports = Backoff;